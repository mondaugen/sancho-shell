# Setting the prefix from `C-b` to `C-a`.
# By remapping the `CapsLock` key to `Ctrl`,
# you can make triggering commands more comfottable!
set -g prefix C-a

# Free the original `Ctrl-b` prefix keybinding.
unbind C-b

# Ensure that we can send `Ctrl-a` to other apps.
bind C-a send-prefix

# Set the default terminal mode to 256color mode.
set -g default-terminal "screen-256color"

# Status bar colours
set -g status-fg white
set -g status-bg colour234

# Use vim keybindings in copy mode
setw -g mode-keys vi

# new shells are login shells
set-option -g default-command "bash"

# show number of panes, command and path when selecting windows
unbind w
bind w choose-window -F '#{window_panes} #{pane_current_command} #{pane_current_path}'
# List the panes, which isn't so necessary actually
unbind P
bind P list-panes -F '#{pane_current_command} #{pane_current_path}'

# we don't use escape as a part of any tmux key sequences
#set -sg escape-time 0

# turn off status line
set-option -g status off

# create new window creates one with same current path
# puts the window after the one you are currently on in the list of windows
unbind c
bind c new-window -a -c '#{pane_current_path}'
unbind '"'
bind '"' split-window -c '#{pane_current_path}'
unbind %
bind % split-window -h -c '#{pane_current_path}'

# show the contents of the buffer in the list (why is this not the default?)
unbind =
bind = choose-buffer -F '#{buffer_sample}'

# resize the pane to a width of 86 (a comfy width for me)
bind r resize-pane -x 86

# copy also to system clipboard
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -sel clip -i'

# renumber the windows when one is closed
set-option -g renumber-windows on

# when in Vim, show the file at the bottom and copy it to the tmux copy buffer
# NOTE only works for sufficiently short file names
bind-key -T prefix F \
    send-keys ,cf \; \
    run-shell "sleep 0.01" \; \
    copy-mode \; \
    send-keys L \; \
    send-keys Space \; \
    send-keys e \; \
    send-keys Enter

# So vim spends less time switching from insert mode to normal mode
set-option -g escape-time 100

# Go into copy-mode and paste with left hand
bind-key    -T prefix       r                    paste-buffer
bind-key    -T prefix       e                    copy-mode
bind-key    -T prefix       ]                    resize-pane -x 86
# disable old copy mode
unbind-key  -T prefix       [

# Stuff for general completion
bind-key -T prefix '*' run-shell 'cd "#{pane_current_path}" && bash ~/.sancho/tmux_general_completion.sh #{cursor_x} #{cursor_y}'

# Copy word under cursor like in vim by pressing one key in copy-mode
bind-key -T copy-mode-vi a run-shell 'tmux set-buffer -w $(python3 ~/.sancho/extract_word_under_cursor.py "#{copy_cursor_line}" "#{copy_cursor_x}")'

# F4 alternative keys for Enter
bind-key -T root F4 send-keys Enter

# More alternate keys
# F1 -> : (for vim)
bind-key -T root F1 send-keys Escape :
# F2 -> :ls (for vim)
bind-key -T root F2 send-keys Escape :ls Enter
# F3 -> show list of tmux windows
bind -T root F3 choose-window -F '#{window_panes} #{pane_current_command} #{pane_current_path}'
# F5 -> go to copy mode
bind-key -T root F5 copy-mode
# F6 go to last tmux window
bind-key -T root F6 last-window
# F7 save current document in vim
bind-key -T root F7 send-keys Escape :w Enter

# F8+<number> jumps to that word (in copy mode)
bind-key -T root F8 switch-client -T nth_word_jump_table
bind-key -T nth_word_jump_table 1 run '~/.sancho/tmux_move_nth_word.sh 0'
bind-key -T nth_word_jump_table 2 run '~/.sancho/tmux_move_nth_word.sh 1'
bind-key -T nth_word_jump_table 3 run '~/.sancho/tmux_move_nth_word.sh 2'
bind-key -T nth_word_jump_table 4 run '~/.sancho/tmux_move_nth_word.sh 3'
bind-key -T nth_word_jump_table 5 run '~/.sancho/tmux_move_nth_word.sh 4'
bind-key -T nth_word_jump_table 6 run '~/.sancho/tmux_move_nth_word.sh 5'
bind-key -T nth_word_jump_table 7 run '~/.sancho/tmux_move_nth_word.sh 6'
bind-key -T nth_word_jump_table 8 run '~/.sancho/tmux_move_nth_word.sh 7'
bind-key -T nth_word_jump_table 9 run '~/.sancho/tmux_move_nth_word.sh 8'

# F9 fuzzy-complete path
bind-key -T root F9 run-shell 'cd "#{pane_current_path}" && bash ~/.sancho/tmux_general_completion.sh #{cursor_x} #{cursor_y}'

# F10 labelled selection
bind-key -T root F10 switch-client -T labelled_selection_cmd_table
bind-key -T labelled_selection_cmd_table w run -b 'MW=#{pane_width} MH=#{pane_height} TARGET_PANE=#I bash ~/.sancho/labelled_pane_selection/test.sh >/dev/null'
bind-key -T labelled_selection_cmd_table l run -b 'MATCHER_STYLE=line_no_ln MW=#{pane_width} MH=#{pane_height} TARGET_PANE=#I bash ~/.sancho/labelled_pane_selection/test.sh >/dev/null'
bind-key -T labelled_selection_cmd_table L run -b 'MATCHER_STYLE=line MW=#{pane_width} MH=#{pane_height} TARGET_PANE=#I bash ~/.sancho/labelled_pane_selection/test.sh >/dev/null'
bind-key -T labelled_selection_cmd_table b run -b 'FINAL_MODE=move_start MW=#{pane_width} MH=#{pane_height} TARGET_PANE=#I bash ~/.sancho/labelled_pane_selection/test.sh >/dev/null'
bind-key -T labelled_selection_cmd_table e run -b 'FINAL_MODE=move_end MW=#{pane_width} MH=#{pane_height} TARGET_PANE=#I bash ~/.sancho/labelled_pane_selection/test.sh >/dev/null'

# Copy from the beginning of the line up to the last : (useful for jumping to files and lines)
bind-key -T nth_word_jump_table 0 send-keys -X start-of-line \; send-keys -X begin-selection \; send-keys -X end-of-line \; send -X jump-backward : \; send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"


# Source local configuration file (if not present, just complains doesn't exist)
source ~/.tmux.conf.local
# Nothing should come after this
